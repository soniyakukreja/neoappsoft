{"ast":null,"code":"import axios from \"axios\";\nimport { all, call, put, select, takeEvery } from 'redux-saga/effects'; //=============LOGIN====================\n\nfunction login(action) {\n  return axios({\n    method: \"post\",\n    url: \"https://apibyashu.herokuapp.com/api/login\",\n    data: action.payload\n  });\n}\n\nfunction* LoginGenerator(action) {\n  var result = yield call(login, action); // based on result of task\n  // we will dispatch differenet type of requests\n\n  if (result.data.token) {\n    yield put({\n      type: 'LOGIN_SUCCESS',\n      payload: result.data\n    });\n    var statee = yield select(function (state) {\n      return state;\n    });\n\n    if (statee.isloggedin) {}\n  } else {\n    yield put({\n      type: 'LOGIN_FAILURE'\n    });\n    console.log('LOGIN_FAILURE put');\n  }\n}\n\n_c = LoginGenerator;\nexport function* LoginSaga() {\n  yield takeEvery('LOGIN', LoginGenerator);\n} //=============LOGIN END====================\n\n_c2 = LoginSaga;\n\nfunction getCakes(action) {\n  return axios({\n    method: \"get\",\n    url: \"https://apibyashu.herokuapp.com/api/allcakes\"\n  });\n}\n\nexport function* AllCakesSaga() {\n  yield takeEvery('AllCakes', CakeGenerator);\n}\n_c3 = AllCakesSaga;\n\nfunction* CakeGenerator(action) {\n  var result = yield call(getCakes, action);\n\n  if (result.data.data.length > 0) {\n    yield put({\n      type: 'CAKES_RECEIVED',\n      payload: result.data\n    });\n  }\n}\n/*export function* OrderSaga(){\r\n    yield takeEvery('ADD_ORDER', LoginGenerator)\r\n    yield takeEvery('FETCH_ORDER')\r\n}\r\n\r\nexport function* RootSaga(){\r\n    yield all([LoginSaga(),OrderSaga()])\r\n}\r\n*/\n\n\n_c4 = CakeGenerator;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"LoginGenerator\");\n$RefreshReg$(_c2, \"LoginSaga\");\n$RefreshReg$(_c3, \"AllCakesSaga\");\n$RefreshReg$(_c4, \"CakeGenerator\");","map":{"version":3,"sources":["/home/neosoft/Desktop/neoappsoft/src/reduxstore/sagas.js"],"names":["axios","all","call","put","select","takeEvery","login","action","method","url","data","payload","LoginGenerator","result","token","type","statee","state","isloggedin","console","log","LoginSaga","getCakes","AllCakesSaga","CakeGenerator","length"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,MAAzB,EAAiCC,SAAjC,QAAkD,oBAAlD,C,CAEA;;AACA,SAASC,KAAT,CAAeC,MAAf,EAAsB;AAClB,SAAOP,KAAK,CAAC;AACTQ,IAAAA,MAAM,EAAE,MADC;AAETC,IAAAA,GAAG,EAAE,2CAFI;AAGTC,IAAAA,IAAI,EAAEH,MAAM,CAACI;AAHJ,GAAD,CAAZ;AAKH;;AAED,UAAUC,cAAV,CAAyBL,MAAzB,EAAgC;AAC5B,MAAIM,MAAM,GAAG,MAAMX,IAAI,CAACI,KAAD,EAAQC,MAAR,CAAvB,CAD4B,CAE5B;AACA;;AACA,MAAGM,MAAM,CAACH,IAAP,CAAYI,KAAf,EAAqB;AACjB,UAAMX,GAAG,CAAC;AAACY,MAAAA,IAAI,EAAC,eAAN;AAAuBJ,MAAAA,OAAO,EAACE,MAAM,CAACH;AAAtC,KAAD,CAAT;AAEA,QAAIM,MAAM,GAAG,MAAMZ,MAAM,CAAC,UAASa,KAAT,EAAe;AACrC,aAAOA,KAAP;AACH,KAFwB,CAAzB;;AAGA,QAAGD,MAAM,CAACE,UAAV,EAAqB,CAEpB;AACJ,GATD,MASM;AACF,UAAMf,GAAG,CAAC;AAACY,MAAAA,IAAI,EAAC;AAAN,KAAD,CAAT;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH;AACJ;;KAjBSR,c;AAmBV,OAAO,UAAUS,SAAV,GAAqB;AACxB,QAAMhB,SAAS,CAAC,OAAD,EAAUO,cAAV,CAAf;AACH,C,CACD;;MAHiBS,S;;AAOjB,SAASC,QAAT,CAAkBf,MAAlB,EAAyB;AACrB,SAAOP,KAAK,CAAC;AACTQ,IAAAA,MAAM,EAAE,KADC;AAETC,IAAAA,GAAG,EAAE;AAFI,GAAD,CAAZ;AAIH;;AAED,OAAO,UAAUc,YAAV,GAAwB;AAC3B,QAAMlB,SAAS,CAAC,UAAD,EAAamB,aAAb,CAAf;AACH;MAFgBD,Y;;AAGjB,UAAUC,aAAV,CAAwBjB,MAAxB,EAA+B;AAC3B,MAAIM,MAAM,GAAG,MAAMX,IAAI,CAACoB,QAAD,EAAWf,MAAX,CAAvB;;AAEA,MAAGM,MAAM,CAACH,IAAP,CAAYA,IAAZ,CAAiBe,MAAjB,GAAwB,CAA3B,EAA6B;AACzB,UAAMtB,GAAG,CAAC;AAACY,MAAAA,IAAI,EAAC,gBAAN;AAAwBJ,MAAAA,OAAO,EAACE,MAAM,CAACH;AAAvC,KAAD,CAAT;AACH;AAEJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MAhBUc,a","sourcesContent":["import axios from \"axios\"\r\nimport { all, call, put, select, takeEvery } from 'redux-saga/effects'\r\n\r\n//=============LOGIN====================\r\nfunction login(action){\r\n    return axios({\r\n        method: \"post\",\r\n        url :\"https://apibyashu.herokuapp.com/api/login\",\r\n        data: action.payload\r\n    })\r\n}\r\n\r\nfunction* LoginGenerator(action){\r\n    var result = yield call(login, action)\r\n    // based on result of task\r\n    // we will dispatch differenet type of requests\r\n    if(result.data.token){\r\n        yield put({type:'LOGIN_SUCCESS', payload:result.data})\r\n\r\n        var statee = yield select(function(state){\r\n            return state\r\n        })\r\n        if(statee.isloggedin){\r\n\r\n        }\r\n    } else{\r\n        yield put({type:'LOGIN_FAILURE'})\r\n        console.log('LOGIN_FAILURE put')\r\n    }\r\n}\r\n\r\nexport function* LoginSaga(){\r\n    yield takeEvery('LOGIN', LoginGenerator)\r\n}\r\n//=============LOGIN END====================\r\n\r\n\r\n\r\nfunction getCakes(action){\r\n    return axios({\r\n        method: \"get\",\r\n        url :\"https://apibyashu.herokuapp.com/api/allcakes\",\r\n    })\r\n}\r\n\r\nexport function* AllCakesSaga(){\r\n    yield takeEvery('AllCakes', CakeGenerator)\r\n}\r\nfunction* CakeGenerator(action){\r\n    var result = yield call(getCakes, action)\r\n    \r\n    if(result.data.data.length>0){\r\n        yield put({type:'CAKES_RECEIVED', payload:result.data})\r\n    }\r\n   \r\n}\r\n/*export function* OrderSaga(){\r\n    yield takeEvery('ADD_ORDER', LoginGenerator)\r\n    yield takeEvery('FETCH_ORDER')\r\n}\r\n\r\nexport function* RootSaga(){\r\n    yield all([LoginSaga(),OrderSaga()])\r\n}\r\n*/"]},"metadata":{},"sourceType":"module"}