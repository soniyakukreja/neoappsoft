{"ast":null,"code":"import axios from \"axios\";\nimport { all, call, put, select, takeEvery } from 'redux-saga/effects'; //=============LOGIN====================\n\nfunction login(action) {\n  return axios({\n    method: \"post\",\n    url: \"https://apibyashu.herokuapp.com/api/login\",\n    data: action.payload\n  });\n}\n\nfunction* LoginGenerator(action) {\n  var result = yield call(login, action); // based on result of task\n  // we will dispatch differenet type of requests\n\n  if (result.data.token) {\n    yield put({\n      type: 'LOGIN_SUCCESS',\n      payload: result.data\n    }); // yield call(GET_CART_DATA,action)\n\n    var statee = yield select(function (state) {\n      return state;\n    });\n\n    if (statee.isloggedin) {}\n  } else {\n    yield put({\n      type: 'LOGIN_FAILURE'\n    });\n    console.log('LOGIN_FAILURE put');\n  }\n}\n\n_c = LoginGenerator;\nexport function* LoginSaga() {\n  yield takeEvery('LOGIN', LoginGenerator);\n} //=============LOGIN END====================\n//=============GET HOME CAKES ====================\n\n_c2 = LoginSaga;\n\nfunction getCakes(action) {\n  return axios({\n    method: \"get\",\n    url: \"https://apibyashu.herokuapp.com/api/allcakes\"\n  });\n}\n\nexport function* AllCakesSaga() {\n  yield takeEvery('AllCakes', CakeGenerator);\n}\n_c3 = AllCakesSaga;\n\nfunction* CakeGenerator(action) {\n  var result = yield call(getCakes, action);\n\n  if (result.data.data.length > 0) {\n    yield put({\n      type: 'CAKES_RECEIVED',\n      payload: result.data\n    });\n  }\n} //=============END GET HOME CAKES  ====================\n//==============initialize user =======================\n\n\n_c4 = CakeGenerator;\nexport function* userInitSaga() {\n  yield takeEvery('USER_INIT', UserGenerator);\n}\nexport function* UserGenerator(action) {\n  var result = yield call(user_init, action);\n\n  if (result === null || result === void 0 ? void 0 : result.data) {\n    var _result$data, _result$data$data;\n\n    yield put({\n      type: 'INITIALIZE_USER',\n      payload: result.data.data\n    });\n\n    if (result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : (_result$data$data = _result$data.data) === null || _result$data$data === void 0 ? void 0 : _result$data$data.token) {\n      var cart_result = yield call(user_cart, action);\n      yield put({\n        type: 'CART_DATA',\n        payload: cart_result.data.data\n      });\n    }\n  }\n}\n_c5 = UserGenerator;\n\nfunction user_init(action) {\n  var token = localStorage.token;\n  return axios({\n    url: 'https://apibyashu.herokuapp.com/api/getuserdetails',\n    method: \"get\",\n    headers: {\n      authtoken: token\n    }\n  });\n}\n\nfunction user_cart(action) {\n  var token = localStorage.token;\n  return axios({\n    url: 'https://apibyashu.herokuapp.com/api/cakecart',\n    method: \"post\",\n    headers: {\n      authtoken: token\n    }\n  });\n} //==============initialize user =======================\n\n/*export function* OrderSaga(){\r\n    yield takeEvery('ADD_ORDER', LoginGenerator)\r\n    yield takeEvery('FETCH_ORDER')\r\n}\r\n\r\nexport function* RootSaga(){\r\n    yield all([LoginSaga(),OrderSaga()])\r\n}\r\n*/\n\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"LoginGenerator\");\n$RefreshReg$(_c2, \"LoginSaga\");\n$RefreshReg$(_c3, \"AllCakesSaga\");\n$RefreshReg$(_c4, \"CakeGenerator\");\n$RefreshReg$(_c5, \"UserGenerator\");","map":{"version":3,"sources":["/home/neosoft/Desktop/neoappsoft/src/reduxstore/sagas.js"],"names":["axios","all","call","put","select","takeEvery","login","action","method","url","data","payload","LoginGenerator","result","token","type","statee","state","isloggedin","console","log","LoginSaga","getCakes","AllCakesSaga","CakeGenerator","length","userInitSaga","UserGenerator","user_init","cart_result","user_cart","localStorage","headers","authtoken"],"mappings":"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","sourcesContent":["import axios from \"axios\"\r\nimport { all, call, put, select, takeEvery } from 'redux-saga/effects'\r\n\r\n//=============LOGIN====================\r\nfunction login(action) {\r\n    return axios({\r\n        method: \"post\",\r\n        url: \"https://apibyashu.herokuapp.com/api/login\",\r\n        data: action.payload\r\n    })\r\n}\r\n\r\nfunction* LoginGenerator(action) {\r\n    var result = yield call(login, action)\r\n    // based on result of task\r\n    // we will dispatch differenet type of requests\r\n    if (result.data.token) {\r\n        yield put({ type: 'LOGIN_SUCCESS', payload: result.data })\r\n        // yield call(GET_CART_DATA,action)\r\n\r\n        var statee = yield select(function (state) {\r\n            return state\r\n        })\r\n        if (statee.isloggedin) {\r\n\r\n        }\r\n    } else {\r\n        yield put({ type: 'LOGIN_FAILURE' })\r\n        console.log('LOGIN_FAILURE put')\r\n    }\r\n}\r\n\r\nexport function* LoginSaga() {\r\n    yield takeEvery('LOGIN', LoginGenerator)\r\n}\r\n//=============LOGIN END====================\r\n\r\n\r\n//=============GET HOME CAKES ====================\r\n\r\nfunction getCakes(action) {\r\n    return axios({\r\n        method: \"get\",\r\n        url: \"https://apibyashu.herokuapp.com/api/allcakes\",\r\n    })\r\n}\r\n\r\nexport function* AllCakesSaga() {\r\n    yield takeEvery('AllCakes', CakeGenerator)\r\n}\r\nfunction* CakeGenerator(action) {\r\n    var result = yield call(getCakes, action)\r\n\r\n    if (result.data.data.length > 0) {\r\n        yield put({ type: 'CAKES_RECEIVED', payload: result.data })\r\n    }\r\n\r\n}\r\n\r\n//=============END GET HOME CAKES  ====================\r\n\r\n//==============initialize user =======================\r\n\r\nexport function* userInitSaga(){\r\n    yield takeEvery('USER_INIT',UserGenerator)\r\n}\r\n\r\nexport function* UserGenerator(action){\r\n    var result = yield call(user_init,action)\r\n    if(result?.data){\r\n        yield put({ type: 'INITIALIZE_USER', payload: result.data.data })\r\n\r\n        if(result?.data?.data?.token){\r\n            var cart_result = yield call(user_cart,action)\r\n            yield put({ type: 'CART_DATA', payload: cart_result.data.data })\r\n        }\r\n    }\r\n}\r\n\r\nfunction user_init(action){\r\n    var token = localStorage.token \r\n    return axios({\r\n    url:'https://apibyashu.herokuapp.com/api/getuserdetails',\r\n    method:\"get\",\r\n    headers : {\r\n        authtoken: token\r\n    }\r\n    })\r\n}\r\n\r\nfunction user_cart(action){\r\n    var token = localStorage.token \r\n    return axios({\r\n    url:'https://apibyashu.herokuapp.com/api/cakecart',\r\n    method:\"post\",\r\n    headers : {\r\n        authtoken: token\r\n    }\r\n    })\r\n}\r\n//==============initialize user =======================\r\n\r\n\r\n/*export function* OrderSaga(){\r\n    yield takeEvery('ADD_ORDER', LoginGenerator)\r\n    yield takeEvery('FETCH_ORDER')\r\n}\r\n\r\nexport function* RootSaga(){\r\n    yield all([LoginSaga(),OrderSaga()])\r\n}\r\n*/"]},"metadata":{},"sourceType":"module"}